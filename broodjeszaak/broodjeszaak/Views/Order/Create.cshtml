@model broodjeszaak.Models.Order
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Plaats Bestelling";
}

@if (!User.Identity.IsAuthenticated)
{
    <div class="alert alert-warning" role="alert">
        Je moet <a href="/Account/Login">inloggen</a> om een bestelling te plaatsen.
    </div>
}

<h2 class="my-4">@ViewBag.Title</h2>

<div class="container">
    <div class="row">
        @foreach (var product in ViewData["Products"] as List<broodjeszaak.Models.Product>)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <!-- Verondersteld dat je afbeeldingen hebt in wwwroot/images -->
                    <img src="@Url.Content($"~/images/{product.ImagePath}.jpg")" class="card-img-top" alt="Afbeelding voor @product.Name">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p>Prijs: €@product.Price</p> <!-- Voeg deze lijn toe -->
                        <input type="number" id="quantity_@product.ProductID" min="1" value="1" class="form-control mb-2 quantity" style="width: 80px;">
                        <button type="button" class="btn btn-primary add-to-cart" data-product-id="@product.ProductID" data-product-name="@product.Name" data-product-price="@product.Price">Toevoegen aan winkelmand</button> <!-- Voeg data-product-price toe -->
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="container">
        <div class="row mt-4">
            <div class="col-12">
                <h3>Winkelwagen</h3>
                <div class="table-responsive">
                    <table class="table" id="cart">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Hoeveelheid</th>
                                <th>Acties</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Items worden hier toegevoegd -->
                        </tbody>
                    </table>
                </div>
                <p id="total-price">Totaalprijs: €0.00</p>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-12 text-center mt-4 mb-4">
                <!-- Voeg mb-4 toe om een marge onderaan toe te voegen -->
                <button type="button" id="place-order" class="btn btn-success">Bestelling Plaatsen</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const cart = JSON.parse(localStorage.getItem('cart')) || [];

            function updateCart() {
                const cartElement = document.querySelector('#cart tbody');
                cartElement.innerHTML = ''; // Reset de inhoud van de tabel
                let totalPrice = 0; // Initialiseer de totaalprijs

                cart.forEach((item, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                                    <td>${item.name}</td>
                                    <td>${item.quantity}</td>
                                    <td>
                                        <button class="btn btn-danger remove-item" data-index="${index}">
                                            Verwijder
                                        </button>
                                    </td>
                                `;
                    cartElement.appendChild(row);

                    totalPrice += item.price * item.quantity; // Bereken de totaalprijs voor elk product in het winkelmandje
                });

                const totalPriceElement = document.querySelector('#total-price');
                totalPriceElement.textContent = 'Totaalprijs: €' + totalPrice.toFixed(2); // Toon de totaalprijs

                localStorage.setItem('cart', JSON.stringify(cart));
            }

            document.querySelectorAll('.add-to-cart').forEach(button => {
                button.addEventListener('click', function () {
                    const productId = this.dataset.productId;
                    const productName = this.dataset.productName;
                    const productPrice = parseFloat(this.dataset.productPrice); // Voeg deze regel toe om de prijs van het product op te halen
                    const quantityInput = document.querySelector(`#quantity_${productId}`);
                    const quantity = parseInt(quantityInput.value, 10) || 0;

                    if (quantity > 0) {
                        const existingItem = cart.find(item => item.productId === productId);
                        if (existingItem) {
                            existingItem.quantity += quantity;
                        } else {
                            cart.push({ productId, name: productName, quantity, price: productPrice }); // Sla de prijs van het product op
                        }
                        updateCart();
                    } else {
                        alert('Voer een geldig aantal in.');
                    }
                });
            });

            document.getElementById('cart').addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-item')) {
                    const index = e.target.dataset.index;
                    cart.splice(index, 1);
                    updateCart();
                }
            });

            updateCart();

            document.getElementById('place-order').addEventListener('click', function () {
                const cart = JSON.parse(localStorage.getItem('cart')) || [];
                if (cart.length > 0) {
                    fetch('/Order/CreateOrder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value // Zorg voor CSRF bescherming
                        },
                        body: JSON.stringify({ cart })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                localStorage.removeItem('cart'); // Leeg de winkelwagen na succesvolle bestelling
                                alert('Bestelling succesvol geplaatst!'); // Toon een bevestigingsbericht

                                // Optioneel: Update de UI om aan te geven dat de winkelwagen leeg is
                                updateCartUI();
                            } else {
                                alert('Er was een probleem met het plaatsen van de bestelling.');
                            }
                        });
                } else {
                    alert('Voeg eerst producten toe aan de winkelwagen.');
                }
            });

            function updateCartUI() {
                // Implementeer logica hier om de UI te updaten, zoals het leegmaken van de tabel die de winkelwagen toont
                const cartElement = document.querySelector('#cart tbody');
                cartElement.innerHTML = ''; // Leeg de tabelinhoud

                const totalPriceElement = document.querySelector('#total-price');
                totalPriceElement.textContent = 'Totaalprijs: €0.00'; // Reset de totaalprijs
            }
        });
    </script>
}